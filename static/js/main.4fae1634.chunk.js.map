{"version":3,"sources":["context/TileContainer.tsx","models/Board.ts","components/Grid/Grid.tsx","hooks/usePrevProps.ts","components/Tile/Tile.tsx","hooks/useTileContainer.ts","components/Board/Board.tsx","models/Tile.ts","pages/AnimateEaseInOut.tsx","pages/AnimateMergeAndSlide.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TileContainerContext","React","createContext","length","tileCount","TileContainer","children","Provider","value","Grid","className","cells","index","push","renderGrid","usePrevProps","ref","useRef","useEffect","current","Tile","position","zIndex","useContext","useTileContainer","boardLength","useState","scale","setScale","withinBoardBoundaries","invariant","prevValue","shallAnimate","undefined","setTimeout","positionToPixels","style","top","left","transform","Board","tiles","tileManagerRef","setLength","offsetWidth","width","pixelSize","tileList","map","id","restProps","renderTiles","AnimateEaseInOut","setTiles","type","size","onClick","icon","AnimateMergeAndSlide","App","setValue","handleChange","defaultValue","onChange","Option","renderContent","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uWAGaA,EAAuBC,IAAMC,cAAc,CACtDC,OAAQ,EACRC,UCCkB,IDQPC,EAAgB,SAAC,GAIhB,IAHZC,EAGW,EAHXA,SAGW,IAFXH,cAEW,MAFF,EAEE,MADXC,iBACW,MCZO,EDYP,EACX,OACE,cAACJ,EAAqBO,SAAtB,CAA+BC,MAAO,CAAEL,SAAQC,aAAhD,SACGE,KEbMG,G,OAAO,SAAC,GAA0B,IAAxBL,EAAuB,EAAvBA,UAYrB,OAAO,qBAAKM,UAAU,OAAf,SAXY,WAIjB,IAHA,IAAMP,EAASC,EAAYA,EACrBO,EAAQ,GAELC,EAAQ,EAAGA,EAAQT,EAAQS,GAAS,EAC3CD,EAAME,KAAK,qBAAsBH,UAAS,aAA/B,UAAaE,KAG1B,OAAOD,EAGqBG,O,QCXnBC,EAAe,SAAUP,GACpC,IAAMQ,EAAMC,mBAMZ,OAJAC,qBAAU,WACRF,EAAIG,QAAUX,KAGTQ,EAAIG,SCJAC,G,OAAO,SAAC,GAAwC,IAAtCZ,EAAqC,EAArCA,MAAOa,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,OACtC,ECL8B,WAC9B,MAA8BC,qBAAWvB,GAEzC,MAAO,CAFP,EAAQG,OAAR,EAAgBC,WDIiBoB,GAAjC,mBAAOC,EAAP,KAAoBrB,EAApB,KACA,EAA0BsB,mBAAS,GAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAEMC,EACJR,EAAS,GAAKjB,GAAaiB,EAAS,GAAKjB,EAC3C0B,YAAUD,EAAuB,qBAEjC,IAAME,EAAYhB,EAAqBP,GAKjCwB,OAFuBC,IAFVlB,EAA+BM,IAG/BU,IAAcvB,EAGjCU,qBAAU,WACJc,IACFJ,EAAS,KACTM,YAAW,kBAAMN,EAAS,KAAI,QAE/B,CAACI,EAAcL,IAElB,IAAMQ,EAAmB,SAACd,GACxB,OAAQA,EAAWjB,EAAcqB,GAG7BW,EAAQ,CACZC,IAAKF,EAAiBd,EAAS,IAC/BiB,KAAMH,EAAiBd,EAAS,IAChCkB,UAAU,SAAD,OAAWZ,EAAX,KACTL,UAGF,OACE,qBAAKZ,UAAS,oBAAeF,GAAS4B,MAAOA,EAA7C,SACG5B,M,kBElCMgC,EAAQ,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,MAAqC,IAA9BrC,iBAA8B,MLPzC,EKOyC,EACrDsC,EAAiBzB,iBAAuB,MAC9C,EAA4BS,mBAAS,GAArC,mBAAOvB,EAAP,KAAewC,EAAf,KAEAzB,qBAAU,WACuB,OAA3BwB,EAAevB,SACjBwB,EAAWD,EAAevB,QAA2ByB,eAEtD,IAEH,IAYMC,ECtBgBC,IDsBG1C,ELXA,GKazB,OACE,sBAAKM,UAAU,QAAQ0B,MAAO,CAAES,SAAhC,UACE,cAAC,EAAD,CAAe1C,OAAQA,EAAQC,UAAWA,EAA1C,SACE,qBAAKM,UAAU,iBAAiBM,IAAK0B,EAArC,SAjBc,WAClB,GAAe,IAAXvC,EACF,OAAO,KAGT,IAAM4C,EAAWN,EAAMO,KAAI,gBAAGC,EAAH,EAAGA,GAAOC,EAAV,wBACzB,cAAC,EAAD,2BAA6BA,GAA7B,IAAwC5B,OAAQ2B,IAAhD,eAAmBA,OAGrB,OAAO,mCAAGF,IASHI,OAGL,cAAC,EAAD,CAAM/C,UAAWA,QEpCVgD,G,MAAmB,WAC9B,MAA0B1B,mBAAqB,IAA/C,mBAAOe,EAAP,KAAcY,EAAd,KAUA,OACE,qCACE,cAAC,EAAD,CAAOZ,MAAOA,EAAOrC,UAAW,IAChC,sBAAKM,UAAU,OAAf,UACE,cAAC,IAAD,CACE4C,KAAK,UACLC,KAAK,QACLC,QAfc,WACpBH,EAAS,CAAC,CAAEhC,SAAU,CAAC,EAAG,GAAIb,MAAO,EAAGyC,GAAI,MAetCQ,KAAM,cAAC,IAAD,CAAgBF,KAAK,UAJ7B,qBAQA,cAAC,IAAD,CACEA,KAAK,QACLC,QAlBY,WAClBH,EAAS,KAkBHI,KAAM,cAAC,IAAD,CAAgBF,KAAK,UAH7B,2BCvBKG,EAAuB,WAClC,MAA0BhC,mBAAqB,CAC7C,CAAEL,SAAU,CAAC,EAAG,GAAIb,MAAO,EAAGyC,GAAI,GAClC,CAAE5B,SAAU,CAAC,EAAG,GAAIb,MAAO,EAAGyC,GAAI,KAFpC,mBAAOR,EAAP,KAAcY,EAAd,KAuBA,OACE,qCACE,cAAC,EAAD,CAAOZ,MAAOA,EAAOrC,UAAW,IAChC,sBAAKM,UAAU,OAAf,UACE,cAAC,IAAD,CACE4C,KAAK,UACLC,KAAK,QACLC,QAzBmB,WACzBH,EAAS,CACP,CAAEhC,SAAU,CAAC,EAAG,GAAIb,MAAO,EAAGyC,GAAI,GAClC,CAAE5B,SAAU,CAAC,EAAG,GAAIb,MAAO,EAAGyC,GAAI,MAuB9BQ,KAAM,cAAC,IAAD,CAAgBF,KAAK,UAJ7B,2BAQA,cAAC,IAAD,CACED,KAAK,UACLC,KAAK,QACLC,QA1BmB,WACzBH,EAAS,CAAC,CAAEhC,SAAU,CAAC,EAAG,GAAIb,MAAO,EAAGyC,GAAI,MA0BtCQ,KAAM,cAAC,IAAD,CAAgBF,KAAK,UAJ7B,2BAQA,cAAC,IAAD,CACEA,KAAK,QACLC,QA7BY,WAClBH,EAAS,CACP,CAAEhC,SAAU,CAAC,EAAG,GAAIb,MAAO,EAAGyC,GAAI,GAClC,CAAE5B,SAAU,CAAC,EAAG,GAAIb,MAAO,EAAGyC,GAAI,MA2B9BQ,KAAM,cAAC,IAAD,CAAgBF,KAAK,UAH7B,0BC9CKI,G,OAAM,WACjB,MAA0BjC,mBAAiB,WAA3C,mBAAOlB,EAAP,KAAcoD,EAAd,KAEMC,EAAe,SAACrD,GACpBoD,EAASpD,IA4BX,OACE,sBAAKE,UAAU,MAAf,UAfE,sBAAKA,UAAU,YAAf,UACE,qBAAKA,UAAU,kBAAf,wBACA,qBAAKA,UAAU,kBAAf,SACE,eAAC,IAAD,CAAQoD,aAAa,UAAUC,SAAUF,EAAcN,KAAK,QAA5D,UACE,cAAC,IAAOS,OAAR,CAAexD,MAAM,UAArB,0BACA,cAAC,IAAOwD,OAAR,CAAexD,MAAM,kBAArB,qCAhBY,WACpB,OAAQA,GACN,IAAK,kBACH,OAAO,cAAC,EAAD,IACT,QACE,OAAO,cAAC,EAAD,KAuBRyD,QC3BQC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.4fae1634.chunk.js","sourcesContent":["import React from \"react\";\nimport { size } from \"../models/Board\";\n\nexport const TileContainerContext = React.createContext({\n  length: 0,\n  tileCount: size,\n});\n\ntype Props = {\n  length: number;\n  tileCount: number;\n  children: any;\n};\n\nexport const TileContainer = ({\n  children,\n  length = 0,\n  tileCount = size,\n}: Props) => {\n  return (\n    <TileContainerContext.Provider value={{ length, tileCount }}>\n      {children}\n    </TileContainerContext.Provider>\n  );\n};\n","/**\n * The number of rows and columns.\n * IMPORTANT! Check styles before changing this value!\n *\n * @constant {number}\n */\nexport const size = 4;\n\n/**\n * The duration of every animation in ms.\n * IMPORTANT! Check styles before modyfing this value!\n *\n * @constant {number} ms\n */\nexport const animationDuration = 500;\n\n/**\n * The pixel size of the grid.\n */\nexport const pixelSize = 8;\n\n/**\n * The board margin (left, right, top, bottom).\n */\nexport const boardMargin = 2 * pixelSize;\n","import React from \"react\";\n\nimport \"./grid.less\";\n\ntype Props = {\n  tileCount: number;\n};\n\nexport const Grid = ({ tileCount }: Props) => {\n  const renderGrid = () => {\n    const length = tileCount * tileCount;\n    const cells = [] as JSX.Element[];\n\n    for (let index = 0; index < length; index += 1) {\n      cells.push(<div key={`${index}`} className={`grid-cell`} />);\n    }\n\n    return cells;\n  };\n\n  return <div className=\"grid\">{renderGrid()}</div>;\n};\n","import { useEffect, useRef } from \"react\";\n\n/**\n * `usePrevProps` allows to store previous value of the tracked props.\n *\n * @link https://blog.logrocket.com/how-to-get-previous-props-state-with-react-hooks/\n * @param {K} value\n * @returns {K | undefined}\n */\nexport const usePrevProps = <K = any>(value: K) => {\n  const ref = useRef<K>();\n\n  useEffect(() => {\n    ref.current = value;\n  });\n\n  return ref.current;\n};\n","import React, { useEffect, useState } from \"react\";\nimport invariant from \"tiny-invariant\";\nimport { usePrevProps } from \"../../hooks/usePrevProps\";\nimport { useTileContainer } from \"../../hooks/useTileContainer\";\nimport \"./tile.less\";\n\ntype Props = {\n  value: number;\n  position: [number, number];\n  zIndex: number;\n};\n\nexport const Tile = ({ value, position, zIndex }: Props) => {\n  const [boardLength, tileCount] = useTileContainer();\n  const [scale, setScale] = useState(1);\n\n  const withinBoardBoundaries =\n    position[0] < tileCount && position[1] < tileCount;\n  invariant(withinBoardBoundaries, \"Tile out of bound\");\n\n  const prevValue = usePrevProps<number>(value);\n  const prevCoords = usePrevProps<[number, number]>(position);\n\n  const isNew = prevCoords === undefined;\n  const hasChanged = prevValue !== value;\n  const shallAnimate = isNew || hasChanged;\n\n  useEffect(() => {\n    if (shallAnimate) {\n      setScale(1.1);\n      setTimeout(() => setScale(1), 250);\n    }\n  }, [shallAnimate, scale]);\n\n  const positionToPixels = (position: number) => {\n    return (position / tileCount) * (boardLength as number);\n  };\n\n  const style = {\n    top: positionToPixels(position[1]),\n    left: positionToPixels(position[0]),\n    transform: `scale(${scale})`,\n    zIndex,\n  };\n\n  return (\n    <div className={`tile tile-${value}`} style={style}>\n      {value}\n    </div>\n  );\n};\n","import { useContext } from \"react\";\nimport { TileContainerContext } from \"../context/TileContainer\";\n\n/**\n * Returns the data of the Tile Container.\n *\n * @returns {number}\n */\nexport const useTileContainer = () => {\n  const { length, tileCount } = useContext(TileContainerContext);\n\n  return [length, tileCount] as [number, number];\n};\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { TileContainer } from \"../../context/TileContainer\";\nimport { boardMargin, size } from \"../../models/Board\";\nimport { TileMeta, tileSize } from \"../../models/Tile\";\nimport { Grid } from \"../Grid\";\nimport { Tile } from \"../Tile\";\nimport \"./board.less\";\n\ntype Props = {\n  tiles: TileMeta[];\n  tileCount: number;\n};\n\nexport const Board = ({ tiles, tileCount = size }: Props) => {\n  const tileManagerRef = useRef<HTMLDivElement>(null);\n  const [length, setLength] = useState(0);\n\n  useEffect(() => {\n    if (tileManagerRef.current !== null) {\n      setLength((tileManagerRef.current as HTMLDivElement).offsetWidth);\n    }\n  }, []);\n\n  const renderTiles = () => {\n    if (length === 0) {\n      return null;\n    }\n\n    const tileList = tiles.map(({ id, ...restProps }) => (\n      <Tile key={`tile-${id}`} {...restProps} zIndex={id} />\n    ));\n\n    return <>{tileList}</>;\n  };\n\n  const width = tileSize * tileCount + boardMargin;\n\n  return (\n    <div className=\"board\" style={{ width }}>\n      <TileContainer length={length} tileCount={tileCount}>\n        <div className=\"tile-container\" ref={tileManagerRef}>\n          {renderTiles()}\n        </div>\n      </TileContainer>\n      <Grid tileCount={tileCount} />\n    </div>\n  );\n};\n","import { pixelSize } from \"./Board\";\n\nexport type TileMeta = {\n  id: number;\n  position: [number, number];\n  value: number;\n  mergeWith?: number;\n};\n\nexport const tileMargin = 2 * pixelSize;\n\nexport const tileMultiplier = 12.5;\n\nexport const tileSize = pixelSize * tileMultiplier + tileMargin;\n","import React, { useState } from \"react\";\nimport { Button } from \"antd\";\nimport { BsFillPlayFill, BsFillStopFill } from \"react-icons/bs\";\nimport { Board } from \"../components/Board\";\nimport { TileMeta } from \"../models/Tile\";\n\nimport \"./style.less\";\n\nexport const AnimateEaseInOut = () => {\n  const [tiles, setTiles] = useState<TileMeta[]>([]);\n\n  const handleAnimate = () => {\n    setTiles([{ position: [1, 1], value: 2, id: 1 }]);\n  };\n\n  const handleReset = () => {\n    setTiles([]);\n  };\n\n  return (\n    <>\n      <Board tiles={tiles} tileCount={3} />\n      <div className=\"menu\">\n        <Button\n          type=\"primary\"\n          size=\"large\"\n          onClick={handleAnimate}\n          icon={<BsFillPlayFill size=\"1.5em\" />}\n        >\n          Animate\n        </Button>\n        <Button\n          size=\"large\"\n          onClick={handleReset}\n          icon={<BsFillStopFill size=\"1.5em\" />}\n        >\n          Reset\n        </Button>\n      </div>\n    </>\n  );\n};\n","import React, { useState } from \"react\";\nimport { Button } from \"antd\";\nimport { BsFillPlayFill, BsFillStopFill } from \"react-icons/bs\";\nimport { Board } from \"../components/Board\";\nimport { TileMeta } from \"../models/Tile\";\n\nimport \"./style.less\";\n\nexport const AnimateMergeAndSlide = () => {\n  const [tiles, setTiles] = useState<TileMeta[]>([\n    { position: [0, 1], value: 2, id: 1 },\n    { position: [2, 1], value: 2, id: 2 },\n  ]);\n\n  const handleAnimateSlide = () => {\n    setTiles([\n      { position: [0, 1], value: 2, id: 1 },\n      { position: [0, 1], value: 2, id: 2 },\n    ]);\n  };\n\n  const handleAnimateMerge = () => {\n    setTiles([{ position: [0, 1], value: 4, id: 1 }]);\n  };\n\n  const handleReset = () => {\n    setTiles([\n      { position: [0, 1], value: 2, id: 1 },\n      { position: [2, 1], value: 2, id: 2 },\n    ]);\n  };\n\n  return (\n    <>\n      <Board tiles={tiles} tileCount={3} />\n      <div className=\"menu\">\n        <Button\n          type=\"primary\"\n          size=\"large\"\n          onClick={handleAnimateSlide}\n          icon={<BsFillPlayFill size=\"1.5em\" />}\n        >\n          Animate Slide\n        </Button>\n        <Button\n          type=\"primary\"\n          size=\"large\"\n          onClick={handleAnimateMerge}\n          icon={<BsFillPlayFill size=\"1.5em\" />}\n        >\n          Animate Merge\n        </Button>\n        <Button\n          size=\"large\"\n          onClick={handleReset}\n          icon={<BsFillStopFill size=\"1.5em\" />}\n        >\n          Reset\n        </Button>\n      </div>\n    </>\n  );\n};\n","import React, { useState } from \"react\";\nimport { Select } from \"antd\";\nimport { AnimateEaseInOut, AnimateMergeAndSlide } from \"./pages\";\n\nimport \"./App.less\";\n\nexport const App = () => {\n  const [value, setValue] = useState<string>(\"default\");\n\n  const handleChange = (value: string) => {\n    setValue(value);\n  };\n\n  const renderContent = () => {\n    switch (value) {\n      case \"merge-and-slide\":\n        return <AnimateMergeAndSlide />;\n      default:\n        return <AnimateEaseInOut />;\n    }\n  };\n\n  const renderSelect = () => {\n    return (\n      <div className=\"form-item\">\n        <div className=\"form-item-label\">Animation:</div>\n        <div className=\"form-item-value\">\n          <Select defaultValue=\"default\" onChange={handleChange} size=\"large\">\n            <Select.Option value=\"default\">Scale In-Out</Select.Option>\n            <Select.Option value=\"merge-and-slide\">\n              Slide and Merge\n            </Select.Option>\n          </Select>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      {renderSelect()}\n      {renderContent()}\n    </div>\n  );\n};\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.less\";\nimport { App } from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}